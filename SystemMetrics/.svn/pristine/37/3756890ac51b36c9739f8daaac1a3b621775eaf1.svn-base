package com.gcaa.resource.metrics.collector.job;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import com.gcaa.metrics.domain.model.Category;
import com.gcaa.metrics.domain.model.Resource;
import com.gcaa.metrics.domain.model.Type;
import com.gcaa.metrics.domain.model.Utilization;
import com.gcaa.metrics.domain.util.FileUtils;
import com.gcaa.resource.metrics.collector.MemoryCollector;
import com.gcaa.resource.metrics.config.MemoryCollectorProperties;
import com.gcaa.resource.metrics.service.ApplicationService;
import static com.gcaa.metrics.domain.util.NumberUtils.*;
import oshi.SystemInfo;


@Component
public class MemoryCollectorJob extends CollectorJob {
	
	private ApplicationService applicationService;
	private MemoryCollectorProperties memoryProperties;
	private MemoryCollector memoryCollector;
	
	@Autowired
	private SystemInfo systemInfo;
	
	private static Logger LOGGER = LoggerFactory.getLogger(MemoryCollectorJob.class);
	
	@Autowired
	public MemoryCollectorJob(ApplicationService applicationService, MemoryCollectorProperties memoryProperties, MemoryCollector memoryCollector) {
		
		this.applicationService = applicationService;
		this.memoryProperties	= memoryProperties; 
		this.memoryCollector	= memoryCollector;
		
	}
	
	@Scheduled(cron = "${memory.frequency-cron}")
	public void collectScheduledMemoryUtilization() {
		collectSystemMemory();
		collectMemoryForProcesses();
	}
	
	public void collectMemoryForProcesses(){
		
		List<Utilization> UtilizationList = new ArrayList<Utilization>();
		if(!memoryProperties.getProcessIds().isEmpty()){
			float totalMemory = Float.valueOf(systemInfo.getHardware().getMemory().getTotal()) / Float.valueOf(memoryProperties.getUnit());
			memoryProperties.getProcessIds().forEach(process -> {
					Optional<Integer> processId = FileUtils.getProcessIdByFilePath(process.getFilePath());
					
					if(processId.isPresent()) {
						
						LOGGER.info("Process id {" + processId.get() +" } found with path { " + process.getFilePath() + " }");
						Resource memory= memoryCollector.collectByProcessId(processId.get());
						if(memory.getUsed() > 0)
							memory.setTotal(floatFormatter(totalMemory));
						
						Utilization utilization = utilization(Type.SYSTEM, Category.MEMORY, Category.categoryByCode(process.getName()).name(), memory);
						UtilizationList.add(utilization);
					}
				});
			
				applicationService.saveUtilizationInBatch(UtilizationList);
			
		};
	}
	
	public void collectSystemMemory(){
		Resource memory= memoryCollector.collect();
		Utilization utilization = utilization(Type.SYSTEM, Category.MEMORY, Type.SYSTEM.name(), memory);
		applicationService.saveUtilization(utilization);
		
	}
	


}
