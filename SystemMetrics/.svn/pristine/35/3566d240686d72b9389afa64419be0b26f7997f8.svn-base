package com.gcaa.resource.metrics.collector;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.gcaa.metrics.domain.model.Category;
import com.gcaa.metrics.domain.model.DiskType;
import com.gcaa.metrics.domain.model.HardDisk;
import com.gcaa.metrics.domain.model.Resource;
import com.gcaa.resource.metrics.config.DiskSpaceCollectorProperties;
import com.gcaa.resource.metrics.config.MemoryCollectorProperties;
import oshi.SystemInfo;
import oshi.hardware.HWDiskStore;
import oshi.hardware.HWPartition;
import oshi.software.os.OSFileStore;
import static com.gcaa.metrics.domain.util.NumberUtils.*;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.filechooser.FileSystemView;

@Component
public class DiskSpaceCollector implements Collector {

	private SystemInfo systemInfo;
	
	private FileSystemView fileSystemView;
	
	private static Logger LOGGER = LoggerFactory.getLogger(DiskSpaceCollector.class);

	private DiskSpaceCollectorProperties collectorProperties;
	
	@Autowired
	public DiskSpaceCollector(SystemInfo systemInfo, FileSystemView fileSystemView, DiskSpaceCollectorProperties collectorProperties) {
		this.systemInfo = systemInfo;
		this.collectorProperties = collectorProperties;
		this.fileSystemView = fileSystemView;
	}

	public List<? extends Resource> collectDisks() {
		
		List<HardDisk> hardDisks = new ArrayList<HardDisk>();
		LOGGER.info("Disk Memory Metrics Collector Started ");
		OSFileStore[] disks = systemInfo.getOperatingSystem().getFileSystem().getFileStores();
		
		if(disks.length > 0) {
			for (OSFileStore disk : disks) {
					File file = fileSystemView.createFileObject(disk.getMount());
					if(DiskType.LOCAL_DISK.getCode().equalsIgnoreCase(fileSystemView.getSystemTypeDescription(file))) {
						float totalDiskSize = Float.valueOf(disk.getTotalSpace()) / Float.valueOf(collectorProperties.getUnit());
						float usedDiskSize = Float.valueOf(totalDiskSize -  (disk.getUsableSpace()) / Float.valueOf(collectorProperties.getUnit()));
						HardDisk hardDisk = new HardDisk(floatFormatter(usedDiskSize), floatFormatter(totalDiskSize),disk.getName());
						hardDisks.add(hardDisk);
					}
			}
		}else {
			LOGGER.info("{ No drive found ...}");
			HardDisk hardDisk = new HardDisk(0,0,"");
			hardDisks.add(hardDisk);
		}
	
		LOGGER.info("{ Memory Metrics Collector Finished. " + hardDisks + " }");
		return hardDisks;

	}

		
	public Resource collectTotalDisk() {
		
		HardDisk hardDisk=null;
		float diskSize=0;
		float diskused=0;
		
		
		LOGGER.info("Total Disk Memory Metrics Collector Started ");
		HWDiskStore[] disks = systemInfo.getHardware().getDiskStores();
		
		if(disks.length > 0) {
			for (HWDiskStore disk : disks) {
				diskSize = diskSize + Float.valueOf(disk.getSize()) / collectorProperties.getUnit();
			}
		}else {
			LOGGER.info("{ No drive found ...}");
			hardDisk = new HardDisk(0,0,"");
		}
	
		if(diskSize > 0) {
			
			diskused = diskSize -  Float.valueOf(diskFreeSize()/collectorProperties.getUnit());
			hardDisk=new HardDisk(floatFormatter(diskused), floatFormatter(diskSize), Category.DISK.name());
		}
		
		LOGGER.info("{ Memory Metrics Collector Finished. " + hardDisk + " }");
		return hardDisk;

	}
	
	private long diskFreeSize() {
		   File[] drives = File.listRoots();
		   long freeSpace = 0;
	       if (drives != null && drives.length > 0) {
	           for (File aDrive : drives) {
	        	   if(DiskType.LOCAL_DISK.getCode().equalsIgnoreCase(fileSystemView.getSystemTypeDescription(aDrive))){
	        		   freeSpace = freeSpace + aDrive.getFreeSpace();
	        	   }
	        	}
	        }
	       
	       return freeSpace;
	}
	
	@Override
	public Resource collect() {
		LOGGER.warn("Not implemented");
		return null;
	}
	@Override
	public Resource collectByProcessId(int processId) {
		LOGGER.warn("Not implemented");
		return null;
	}
	
	
}

	
