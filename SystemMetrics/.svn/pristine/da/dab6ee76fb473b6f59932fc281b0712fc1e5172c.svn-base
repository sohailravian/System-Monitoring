package com.gcaa.resource.metrics.collector;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.gcaa.metrics.domain.model.Category;
import com.gcaa.metrics.domain.model.Host;
import com.gcaa.metrics.domain.model.Memory;
import com.gcaa.metrics.domain.model.Resource;
import com.gcaa.metrics.domain.model.Type;
import com.gcaa.metrics.domain.model.Utilization;
import com.gcaa.resource.metrics.ApplicationService;
import com.gcaa.resource.metrics.config.MemoryCollectorProperties;


@Component
public class MemoryCollectorJob {
	
	private ApplicationService applicationService;
	private MemoryCollectorProperties memoryProperties;
	private MemoryCollector memoryCollector;
	
	@Value("${memory.frequency-cron}")
	private String memoryCollectorFrequency;
	
	@Autowired
	public MemoryCollectorJob(ApplicationService applicationService,
							  MemoryCollectorProperties memoryProperties,
							  MemoryCollector memoryCollector) {
		this.applicationService = applicationService;
		this.memoryProperties	= memoryProperties; 
		this.memoryCollector	= memoryCollector;
	}
	
	
	@Scheduled(cron = "${memory.frequency-cron}")
	public void collectScheduledMemoryUtilization() {
		collectMemory();
	}
	
	private void collectMemoryForProcesses(){
	
	if(!memoryProperties.getProcessIds().isEmpty())
		{
			System.out.println("Memory process");
		}
		
	}
	
	private void collectMemory(){
		Resource memory= memoryCollector.collect();
		Utilization utilization = new Utilization(new Host(1, "Machine 1"), Type.SYSTEM, Category.MEMORY, memory, new Date());
		applicationService.saveUtilization(utilization);
		
	}
		
}
