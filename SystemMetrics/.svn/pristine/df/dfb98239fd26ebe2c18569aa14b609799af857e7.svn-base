package com.gcaa.resource.metrics.collector;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.gcaa.metrics.domain.model.Memory;
import com.gcaa.metrics.domain.model.Resource;
import com.gcaa.resource.metrics.config.MemoryCollectorProperties;
import oshi.SystemInfo;
import oshi.software.os.OSProcess;
import static com.gcaa.metrics.domain.util.NumberUtils.*;

@Component
public class MemoryCollector implements Collector {

	private SystemInfo systemInfo;
	
	private static Logger LOGGER = LoggerFactory.getLogger(MemoryCollector.class);

	private MemoryCollectorProperties memoryProperties;

	@Autowired
	public MemoryCollector(SystemInfo systemInfo, MemoryCollectorProperties collectorProperties) {
		this.systemInfo = systemInfo;
		this.memoryProperties = collectorProperties;
	}

	@Override
	public Resource collect() {

		LOGGER.info("{ Memory Metrics Collector Started. }");
		float total = Float.valueOf(systemInfo.getHardware().getMemory().getTotal()) / memoryProperties.getUnit();
		float used 	= total - ( Float.valueOf(systemInfo.getHardware().getMemory().getAvailable()) / memoryProperties.getUnit());
		
		Memory memory = new Memory(floatFormatter(used), floatFormatter(total));
		LOGGER.info("{ Memory Metrics Collector Finished. " + memory + " }");
		return memory;

	}

	@Override
	public Resource collectByProcessId(int processId) {
		
		Memory memory=null;
		LOGGER.info("Memory Metrics Collector Started With Process { " + processId + " }");
		OSProcess process = systemInfo.getOperatingSystem().getProcess(processId);
		
		if(null == process) {
			memory= new Memory(0, 0);
			LOGGER.info("Memory metrics not found with process { "+ processId +" }");
		}else {
			float used 	= Float.valueOf(process.getResidentSetSize()) / memoryProperties.getUnit();
			float total = used + 0;
			memory = new Memory(floatFormatter(used), floatFormatter(total));
		}
	
		LOGGER.info("{ Memory Metrics Collector Finished. " + memory + " }");
		return memory;

	}

	public static void main(String[] args) {
		float a = 9715712f /  1073741824f ;
		System.out.println((a/ 7)  * 100);
		System.out.println(9715712 %  1073741824);
	
		
	}
	
}

	
