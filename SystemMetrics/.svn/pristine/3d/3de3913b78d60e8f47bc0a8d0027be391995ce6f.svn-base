package com.gcaa.resource.metrics.collector.job;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import com.gcaa.metrics.domain.model.Category;
import com.gcaa.metrics.domain.model.GcaaOSProcess;
import com.gcaa.metrics.domain.model.Resource;
import com.gcaa.metrics.domain.model.Type;
import com.gcaa.metrics.domain.model.Utilization;
import com.gcaa.metrics.domain.util.FileUtils;
import com.gcaa.resource.metrics.collector.PerformanceCollector;
import com.gcaa.resource.metrics.collector.TopPerformanceCollector;
import com.gcaa.resource.metrics.config.PerformanceCollectorProperties;
import com.gcaa.resource.metrics.service.ApplicationService;
import static com.gcaa.metrics.domain.util.NumberUtils.*;
import oshi.SystemInfo;
import oshi.software.os.OSProcess;
import oshi.software.os.OperatingSystem.ProcessSort;

@Component
public class PerformanceCollectorJob extends CollectorJob {
	
	private ApplicationService applicationService;
	private PerformanceCollectorProperties performanceProperties;
	private PerformanceCollector performanceCollector;
	private TopPerformanceCollector topPerformanceCollector;
	
	public static transient long previousTime;
	public static transient long previousScheduleTime;
	
	private static final int PROCESS_TO_FETCH = 25; 
	
	
	public static Map<Integer,GcaaOSProcess> topProcesses = new ConcurrentHashMap<Integer,GcaaOSProcess>();
	
	@Autowired
	private SystemInfo systemInfo;
	
	private static Logger LOGGER = LoggerFactory.getLogger(PerformanceCollectorJob.class);
	
	@Autowired
	public PerformanceCollectorJob(ApplicationService applicationService, 
									PerformanceCollectorProperties memoryProperties, 
									PerformanceCollector memoryCollector,
									TopPerformanceCollector topPerformanceCollector) {
		this.applicationService 		= applicationService;
		this.performanceProperties		= memoryProperties; 
		this.performanceCollector		= memoryCollector;
		this.topPerformanceCollector 	= topPerformanceCollector;
	}
	
	@Scheduled(cron = "${cpu.frequency-cron}")
	public void collectScheduledMemoryUtilization() {
		LOGGER.info("{ CPU collection job started }");
		collectSystemPerformance();
		collectPerformanceForTopProcesses();
		collectPerformanceForSpecificProcesses();
		LOGGER.info("{ CPU collection job started }");
	}
	
	public void collectPerformanceForSpecificProcesses(){
		
		List<Utilization> UtilizationList = new ArrayList<Utilization>();
		if(!performanceProperties.getProcessIds().isEmpty()){
			double totalCpuUsed = Double.valueOf(Double.toString(systemInfo.getHardware().getProcessor().getSystemCpuLoad() * HUNDRED_PERCENT));
			performanceProperties.getProcessIds().forEach(process -> {
					
					Optional<Integer> processId = FileUtils.getProcessIdByFilePath(process.getFilePath());
					if(processId.isPresent()) {
						
						LOGGER.info("{ Process id {" + processId.get() +" } found with path { " + process.getFilePath() + " }}");
						Optional<Resource> cpu= performanceCollector.collectByProcessId(processId.get());
						if(cpu.isPresent()) {
							cpu.get().setTotal(doubleFormatter(totalCpuUsed));
							Utilization utilization = utilization(Type.SYSTEM, Category.CPU, Category.categoryByCode(process.getName()).name(), cpu.get());
							UtilizationList.add(utilization);
						}
					}
				});
			
				applicationService.saveUtilizationInBatch(UtilizationList);
			
		};
	}
	
	public void collectPerformanceForTopProcesses(){
		
		List<GcaaOSProcess> gcaaOSProcesses = new ArrayList<GcaaOSProcess>();
		OSProcess[] osProcesses = systemInfo.getOperatingSystem().getProcesses(PROCESS_TO_FETCH, ProcessSort.MEMORY);
		
		if(osProcesses.length > 0) {
			List<Utilization> utilizationList = new ArrayList<Utilization>();
			Arrays.stream(osProcesses).forEach(osProcess -> {
				Optional<Resource> cpu= topPerformanceCollector.collectByProcessId(osProcess.getProcessID());
				if(cpu.isPresent()) {
					GcaaOSProcess gcaaOsProcess = new GcaaOSProcess(cpu.get(), osProcess);
					gcaaOSProcesses.add(gcaaOsProcess);
				}
				
			});
			
			gcaaOSProcesses.stream()
			.sorted((GcaaOSProcess p1,GcaaOSProcess p2 ) -> 
					Double.compare(p2.getResource().getUsed() , p1.getResource().getUsed()))
			.limit(performanceProperties.getProcessCount()).forEach(gcaaSortedProcess ->{
					Utilization utilization = utilization(Type.SYSTEM, Category.CPU,gcaaSortedProcess.getOsProcess().getName(), gcaaSortedProcess.getResource());
					utilizationList.add(utilization);
			});
			
			applicationService.saveUtilizationInBatch(utilizationList);
		}
			
	}

	
	public void collectSystemPerformance(){
		Optional<Resource> memory= performanceCollector.collect();
		Utilization utilization = utilization(Type.SYSTEM, Category.CPU, Type.SYSTEM.name(), memory.get());
		applicationService.saveUtilization(utilization);
		
	}
	


}
